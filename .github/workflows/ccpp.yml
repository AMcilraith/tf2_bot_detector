name: build

on:
  push:
    paths-ignore:
      - 'schemas/**.json'
      - 'staging/cfg/**.json'
      - '*.md'
      - '*.appinstaller_template'

defaults:
  run:
    shell: bash

jobs:
  setup_version:
    runs-on: windows-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Extract TF2BD_VERSION
      id: tf2bd_version
      run: |
        mkdir build_dir
        cd build_dir
        cmake ../ || true     # we know this will fail, we just need version info from CMakeCache.txt
        TF2BD_VERSION_NOBUILD=`cat CMakeCache.txt | grep TF2BD_VERSION_NOBUILD: | cut -d "=" -f2`
        echo "::set-output name=value::$TF2BD_VERSION_NOBUILD.${{ github.run_number }}"

    - name: Set TF2BD version link on tf2bd-util
      run: |
        curl -X POST "https://tf2bd-util.pazer.us/NightlyArchive/SetData/GitHubRunID?key=${{ secrets.TF2BD_NIGHTLY_UPLOAD_API_KEY }}&version=${{ steps.tf2bd_version.value }}&runid=${{ github.run_id }}" -d ""

    - name: Debug
      run: |
        echo "github.event_name = ${{ github.event_name }}"
        echo "github.sha = ${{ github.sha }}"
        echo "github.ref = ${{ github.ref }}"
        echo "github.run_id = ${{ github.run_id }}"
        echo "github.run_number = ${{ github.run_number }}"



  build:
    needs: setup_version
    runs-on: ${{ matrix.os }}
    strategy:
      # fail-fast: false
      matrix:
        os: [windows-latest]
        triplet: [x86-windows, x64-windows]
        discord_integration: [true, false]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            triplet: x86-windows
            tf2bd_arch: x86
          - os: windows-latest
            triplet: x64-windows
            tf2bd_arch: x64

    steps:
    - name: Determine artifact behavior
      id: determine_artifact_behavior
      if: matrix.discord_integration == true
      run: echo "::set-output name=upload::1"

    - name: Config cross-platform paths
      id: tf2bd_paths
      run: |
        tf2bd_workspace=`realpath "${{ github.workspace }}"`
        echo "::set-output name=workspace::$tf2bd_workspace"
        echo "::set-output name=build_dir::$tf2bd_workspace/tf2bd_cmake_build_dir/"

    - name: Debug
      run: |
        echo "matrix.os = ${{ matrix.os }}"
        echo "matrix.triplet = ${{ matrix.triplet }}"
        echo "matrix.discord_integration = ${{ matrix.discord_integration }}"
        echo "matrix.tf2bd_arch = ${{ matrix.tf2bd_arch }}"
        echo "matrix.build_type = ${{ matrix.build_type }}"
        echo "steps.determine_artifact_behavior.upload = ${{ steps.determine_artifact_behavior.upload }}"
        echo "needs.setup_version.tf2bd_version.value = ${{ needs.setup_version.tf2bd_version.value }}"
        echo "steps.tf2bd_paths.outputs.workspace = ${{ steps.tf2bd_paths.outputs.workspace }}"
        echo "steps.tf2bd_paths.outputs.build_dir = ${{ steps.tf2bd_paths.outputs.build_dir }}"

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: cache-vcpkg
      uses: actions/cache@v2
      env:
        VCPKG_ROOT: '${{ github.workspace }}/submodules/vcpkg'
      with:
        key: ${{ hashFiles('.git/modules/submodules/vcpkg/HEAD') }}-${{ hashFiles('vcpkg.json') }}-${{ matrix.triplet }}-3
        path: |
          ${{ env.VCPKG_ROOT }}/archives
          ${{ env.VCPKG_ROOT }}/vcpkg.exe

    - uses: seanmiddleditch/gha-setup-ninja@v2
    - name: Configure build tools
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.tf2bd_arch }}

    - name: CMake
      if: ${{ startsWith(matrix.os, 'windows') }}
      env:
        VCPKG_FEATURE_FLAGS: manifests
        RUNVCPKG_VCPKG_ROOT: ${{ github.workspace }}/submodules/vcpkg
      run: |
        mkdir "${{ steps.tf2bd_paths.outputs.build_dir }}"
        cd "${{ steps.tf2bd_paths.outputs.build_dir }}"
        cmake -G Ninja \
          -DTF2BD_IS_CI_COMPILE=ON \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE="${{ steps.tf2bd_paths.outputs.build_dir }}" \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG="${{ steps.tf2bd_paths.outputs.build_dir }}" \
          -DTF2BD_ENABLE_DISCORD_INTEGRATION=${{ matrix.discord_integration }} \
          -DTF2BD_VERSION_BUILD=${{ github.run_number }} \
          ../
        cmake --build . --config ${{ matrix.build_type }}

    - name: Sign artifacts
      if: ${{ startsWith(matrix.os, 'windows') }}
      uses: PazerOP/code-sign-action@v3
      with:
        folder: '${{ steps.tf2bd_paths.outputs.build_dir }}'
        certificate: '${{ secrets.CERTIFICATE_PFX_BASE64 }}'
        password: '${{ secrets.CERTIFICATE_PFX_PASSWORD }}'

    - name: "Artifacts: Fresh, signed exe"
      if: steps.determine_artifact_behavior.upload && startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: "smartscreen_${{ matrix.triplet }}_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type }}"
        if-no-files-found: error
        path: "${{ steps.tf2bd_paths.outputs.build_dir }}/*.exe"

    - name: "Artifacts: Prepare staging/"
      if: steps.determine_artifact_behavior.upload && startsWith(matrix.os, 'windows')
      run: |
        echo "Copying build artifacts to staging..."
        cp -v ${{ steps.tf2bd_paths.outputs.build_dir }}/*.exe ${{ steps.tf2bd_paths.outputs.build_dir }}/*.dll ${{ steps.tf2bd_paths.outputs.workspace }}/staging/

        echo "Performing smartscreen workaround..."
        echo "Hash of current exe: "
        sha1sum "${{ steps.tf2bd_paths.outputs.workspace }}/staging/tf2_bot_detector.exe"
        cp -v "${{ steps.tf2bd_paths.outputs.workspace }}/smartscreen/${{ matrix.tf2bd_arch }}/tf2_bot_detector.exe" "${{ steps.tf2bd_paths.outputs.workspace }}/staging/tf2_bot_detector.exe"
        echo "Hash of cached exe: "
        sha1sum "${{ steps.tf2bd_paths.outputs.workspace }}/staging/tf2_bot_detector.exe"

    - name: "Artifacts: staging -> tf2bd-util nightly archive"
      if: matrix.build_type == 'Release' && steps.determine_artifact_behavior.upload && github.ref == 'refs/heads/master'
      run: |
        echo "Uploading artifact to tf2bd-util..."
        cd "${{ steps.tf2bd_paths.outputs.workspace }}/staging/"
        7z a -so data.zip * | curl -T - "https://tf2bd-util.pazer.us/NightlyArchive/UploadArtifact?key=${{ secrets.TF2BD_NIGHTLY_UPLOAD_API_KEY }}&version=${{ needs.setup_version.tf2bd_version.value }}&artifactType=MainToolPortable&os=windows&arch=${{ matrix.tf2bd_arch }}"

    - name: "Artifacts: Upload staging/"
      if: steps.determine_artifact_behavior.upload && startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: "tf2-bot-detector_${{ matrix.triplet }}_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type }}"
        if-no-files-found: error
        path: ${{ steps.tf2bd_paths.outputs.workspace }}/staging/

    - name: "Artifacts: symbols"
      if: steps.determine_artifact_behavior.upload && startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        name: "tf2-bot-detector-symbols_${{ matrix.triplet }}_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type }}"
        if-no-files-found: error
        path: "${{ steps.tf2bd_paths.outputs.build_dir }}/**.pdb"



  updater:
    needs: setup_version
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        triplet: [x86-windows-static, x64-windows-static]
        build_type: [Debug, Release]
        include:
          - os: windows-latest
            triplet: x86-windows-static
            tf2bd_arch: x86
          - os: windows-latest
            triplet: x64-windows-static
            tf2bd_arch: x64

    steps:
    - name: Config cross-platform paths
      id: tf2bd_paths
      run: |
        tf2bd_workspace=`realpath "${{ github.workspace }}"`
        echo "::set-output name=workspace::$tf2bd_workspace"
        echo "::set-output name=build_dir::$tf2bd_workspace/tf2bd_cmake_build_dir/"

    - name: Debug
      run: |
        echo "matrix.os = ${{ matrix.os }}"
        echo "matrix.triplet = ${{ matrix.triplet }}"
        echo "matrix.discord_integration = ${{ matrix.discord_integration }}"
        echo "matrix.tf2bd_arch = ${{ matrix.tf2bd_arch }}"
        echo "matrix.build_type = ${{ matrix.build_type }}"
        echo "needs.setup_version.tf2bd_version.value = ${{ needs.setup_version.tf2bd_version.value }}"
        echo "steps.tf2bd_paths.outputs.workspace = ${{ steps.tf2bd_paths.outputs.workspace }}"
        echo "steps.tf2bd_paths.outputs.build_dir = ${{ steps.tf2bd_paths.outputs.build_dir }}"

    - name: Checkout
      uses: actions/checkout@v2
      with:
        submodules: recursive

    - name: cache-vcpkg
      uses: actions/cache@v2
      env:
        VCPKG_ROOT: '${{ github.workspace }}/submodules/vcpkg'
      with:
        key: ${{ hashFiles('.git/modules/submodules/vcpkg/HEAD') }}-${{ hashFiles('tf2_bot_detector_updater/vcpkg.json') }}-${{ matrix.triplet }}-3
        path: |
          ${{ env.VCPKG_ROOT }}/archives
          ${{ env.VCPKG_ROOT }}/vcpkg.exe

    - uses: seanmiddleditch/gha-setup-ninja@v2
    - name: Configure build tools
      uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: ${{ matrix.tf2bd_arch }}

    - name: CMake
      if: ${{ startsWith(matrix.os, 'windows') }}
      env:
        VCPKG_FEATURE_FLAGS: manifests
        RUNVCPKG_VCPKG_ROOT: ${{ github.workspace }}/submodules/vcpkg
      run: |
        mkdir "${{ steps.tf2bd_paths.outputs.build_dir }}"
        cd "${{ steps.tf2bd_paths.outputs.build_dir }}"
        cmake -G Ninja \
          -DTF2BD_IS_CI_COMPILE=ON \
          -DVCPKG_TARGET_TRIPLET=${{ matrix.triplet }} \
          -DVCPKG_CRT_LINKAGE=static \
          -DVCPKG_LIBRARY_LINKAGE=static \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_TOOLCHAIN_FILE="${{ env.RUNVCPKG_VCPKG_ROOT }}/scripts/buildsystems/vcpkg.cmake" \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_RELEASE="${{ steps.tf2bd_paths.outputs.build_dir }}" \
          -DCMAKE_RUNTIME_OUTPUT_DIRECTORY_DEBUG="${{ steps.tf2bd_paths.outputs.build_dir }}" \
          -DTF2BD_ENABLE_DISCORD_INTEGRATION=${{ matrix.discord_integration }} \
          -DTF2BD_VERSION_BUILD=${{ github.run_number }} \
          ../tf2_bot_detector_updater/
        cmake --build . --config ${{ matrix.build_type }}

    - name: Sign artifacts
      if: ${{ startsWith(matrix.os, 'windows') }}
      uses: PazerOP/code-sign-action@v3
      with:
        folder: '${{ steps.tf2bd_paths.outputs.build_dir }}'
        certificate: '${{ secrets.CERTIFICATE_PFX_BASE64 }}'
        password: '${{ secrets.CERTIFICATE_PFX_PASSWORD }}'

    - name: "Artifacts: tf2_bot_detector_updater -> tf2bd-util nightly archive"
      if: matrix.build_type == 'Release' && github.ref == 'refs/heads/master'
      run: |
        echo "Uploading artifact to tf2bd-util..."
        cd "${{ steps.tf2bd_paths.outputs.build_dir }}"
        7z a -so data.zip *.dll *.exe | curl -T - "https://tf2bd-util.pazer.us/NightlyArchive/UploadArtifact?key=${{ secrets.TF2BD_NIGHTLY_UPLOAD_API_KEY }}&version=${{ needs.setup_version.tf2bd_version.value }}&artifactType=Updater&os=windows&arch=${{ matrix.tf2bd_arch }}"

    - name: "Artifacts: tf2_bot_detector_updater"
      uses: actions/upload-artifact@v2
      with:
        name: "updater_${{ matrix.triplet }}_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type }}"
        if-no-files-found: error
        path: |
          ${{ steps.tf2bd_paths.outputs.build_dir }}/*.dll
          ${{ steps.tf2bd_paths.outputs.build_dir }}/*.exe

    - name: "Artifacts: symbols"
      if: startsWith(matrix.os, 'windows')
      uses: actions/upload-artifact@v2
      with:
        if-no-files-found: error
        name: "updater-symbols_${{ matrix.triplet }}_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type }}"
        path: "${{ steps.tf2bd_paths.outputs.build_dir }}/**.pdb"



  msix:
    runs-on: windows-latest
    needs: build
    strategy:
      # fail-fast: false
      matrix:
        tf2bd_arch: [x86, x64]
        build_type:
          - name: Debug
            suffix: -debug
            appid_suffix: Debug
          - name: Release

    steps:
    - name: Debug
      run: |
        echo "matrix.tf2bd_arch = ${{ matrix.tf2bd_arch }}"
        echo "matrix.build_type.name = ${{ matrix.build_type.name }}"
        echo "matrix.build_type.suffix = ${{ matrix.build_type.suffix }}"

    - name: Config msix filename
      id: msix_filename
      run: echo "::set-output name=value::tf2-bot-detector_${{ matrix.tf2bd_arch }}-windows_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type.name }}.msix"

    - name: Configure PATH for windows sdk
      uses: ilammy/msvc-dev-cmd@v1

    - name: Checkout
      uses: actions/checkout@v2

    - name: Download artifact
      uses: actions/download-artifact@v2
      with:
        name: "tf2-bot-detector_${{ matrix.tf2bd_arch }}-windows_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type.name }}"
        path: msix/package_staging/app

    - name: Mark as non-portable
      run: touch msix/package_staging/app/cfg/.non_portable

    - name: Find and replace data in package config
      run: |
        cat msix/package_staging/AppxManifest.xml \
          | sed 's/TF2BD_PROCESSOR_ARCH_REPLACE_ME/${{ matrix.tf2bd_arch }}/g' \
          | sed 's/TF2BD_VERSION_REPLACE_ME/${{ needs.setup_version.tf2bd_version.value }}/g' \
          | sed 's/TF2BD_PACKAGE_IDENTITY_SUFFIX_REPLACE_ME/${{ matrix.build_type.suffix }}/g' \
          | sed 's/TF2BD_APPLICATION_IDENTITY_SUFFIX_REPLACE_ME/${{ matrix.build_type.appid_suffix }}/g' \
          | sed 's/TF2BD_DISPLAYNAME_SUFFIX_REPLACE_ME/${{ matrix.build_type.suffix }}/g' \
          | tee msix/package_staging/AppxManifest.xml

    - name: Create msix package
      shell: cmd
      run: |
        cd msix
        makeappx.exe pack /d package_staging /p ${{ steps.msix_filename.value }}

    - name: Sign msix package
      uses: PazerOP/code-sign-action@v3
      with:
        folder: msix
        certificate: '${{ secrets.CERTIFICATE_PFX_BASE64 }}'
        password: '${{ secrets.CERTIFICATE_PFX_PASSWORD }}'

    - name: Upload msix package
      uses: actions/upload-artifact@v2
      with:
        if-no-files-found: error
        name: ${{ steps.msix_filename.value }}
        path: "msix/${{ steps.msix_filename.value }}"



  msixbundle:
    runs-on: windows-latest
    needs: msix
    strategy:
      # fail-fast: false
      matrix:
        build_type:
          - name: Debug
            suffix: -debug
          - name: Release

    steps:
    - name: Configure PATH for windows sdk
      uses: ilammy/msvc-dev-cmd@v1

    - name: Download msix (x86)
      uses: actions/download-artifact@v2
      with:
        name: "tf2-bot-detector_x86-windows_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type.name }}.msix"
        path: msix/bundle_staging
    - name: Download msix (x64)
      uses: actions/download-artifact@v2
      with:
        name: "tf2-bot-detector_x64-windows_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type.name }}.msix"
        path: msix/bundle_staging

    - name: Config msixbundle name
      id: msixbundle_name
      run: echo "::set-output name=value::tf2-bot-detector_windows_${{ needs.setup_version.tf2bd_version.value }}_${{ matrix.build_type.name }}.msixbundle"

    - name: Create bundle
      shell: cmd
      run: |
        cd msix
        makeappx bundle /d bundle_staging /bv ${{ needs.setup_version.tf2bd_version.value }} /p ${{ steps.msixbundle_name.value }}

    - name: Sign bundle
      uses: PazerOP/code-sign-action@v3
      with:
        folder: msix
        certificate: '${{ secrets.CERTIFICATE_PFX_BASE64 }}'
        password: '${{ secrets.CERTIFICATE_PFX_PASSWORD }}'

    - name: "Artifacts: msix bundle -> tf2bd-util nightly archive"
      if: matrix.build_type.name == 'Release' && github.ref == 'refs/heads/master'
      run: |
        echo "Uploading artifact to tf2bd-util..."
        curl -T "msix/${{ steps.msixbundle_name.value }}" "https://tf2bd-util.pazer.us/NightlyArchive/UploadArtifact?key=${{ secrets.TF2BD_NIGHTLY_UPLOAD_API_KEY }}&version=${{ needs.setup_version.tf2bd_version.value }}&artifactType=MainToolMSIXBundle&os=windows&arch=AnyCPU"

    - name: Upload bundle (github actions artifact)
      uses: actions/upload-artifact@v2
      with:
        if-no-files-found: error
        name: ${{ steps.msixbundle_name.value }}
        path: "msix/${{ steps.msixbundle_name.value }}"
